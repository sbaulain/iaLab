@startuml
Ia -> Lab: setLabyrinthe()
Lab -> Lab:setcoutMatrice() 
Lab --> Ia: 

Ia -> Ia: resolveIA()

Ia -> Qlearn: testQGammas()
Qlearn -> Qlearn : set_r() 

loop  fois le nombre de valeurs de gamma

      Qlearn -> Qlearn : setQinit()
      Qlearn -> Qlearn : setgamma()
      Qlearn -> Qlearn : testQ()
      loop tant que (KeepGoing() == True) et (nbIt<limIt)
 
           loop tant que le sommet de sortie n'est pas trouvé
                 Qlearn -> Qlearn : first()
           end
      end
end
Qlearn -> Qlearn : traceChemin()
Qlearn --> Ia

Ia -> AStar : setListNodes()
Ia -> AStar : a_star_search()

loop TANT QUE on a pas trouvé la sortie

      AStar->AStar : setEstimate()
      loop POUR TOUT les enfants du candidat 
              AStar->AStar : setCostSoFar()
              AStar->AStar : setEstimate()
      end 
      AStar->AStar : getBestChild()
      AStar->AStar : checkFrontier()
end
AStar --> Ia
@enduml